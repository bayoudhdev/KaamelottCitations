plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.demo.kaamelott"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    // Tests can be Robolectric or instrumented tests
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    packagingOptions {
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

dependencies {
    // kotlin
    implementation "androidx.core:core-ktx:$core_ktx"

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_runtime"

    // Compose
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.foundation:foundation-layout:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"

    // Coil
    implementation "io.coil-kt:coil-compose:$coil_compose"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hilt_android"
    implementation "androidx.hilt:hilt-navigation-compose:$navigation_compose"
    kapt "com.google.dagger:hilt-compiler:$hilt_compiler"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$serialization_converter"

    // Local tests
    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test.ext:junit:$ext_junit"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    testImplementation "io.mockk:mockk:$mockk"
    testImplementation "app.cash.turbine:turbine:$turbine"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesTest"

    // Instrumentation tests
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"

    // Others
    implementation "androidx.startup:startup-runtime:$startup_runtime"
    implementation "com.jakewharton.timber:timber:$timber"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_json"
    implementation "androidx.window:window:$window"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-swiperefresh:$accompanist_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors (disabled by default)
        allWarningsAsErrors = project.hasProperty("warningsAsErrors") ? project.warningsAsErrors : false

        freeCompilerArgs += '-opt-in=kotlin.RequiresOptIn'
        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs += '-opt-in=kotlin.Experimental'
        freeCompilerArgs += '-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi'
        freeCompilerArgs += '-Xopt-in=kotlinx.coroutines.FlowPreview'
        freeCompilerArgs += '-Xopt-in=kotlin.ExperimentalStdlibApi'
        // Set JVM target to 1.8
        jvmTarget = "1.8"
    }
}
